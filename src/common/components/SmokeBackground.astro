<div id="smoke-bgk" class="smoke-bgk" transition:persist></div>

<style>
  .smoke-bgk {
    width: 100%;
    height: 100%;
    position: fixed;
    top: 0;
    z-index: -1;
  }
</style>

<script>
  import * as THREE from "three";

  const $ = (selector: string) => document.querySelector(selector);

  let smokeAnimationInitialized = false;
  let renderer: THREE.WebGLRenderer,
    scene: THREE.Scene,
    camera: THREE.PerspectiveCamera,
    light: THREE.DirectionalLight;
  const smokeParticles: THREE.Mesh[] = [];

  const $bgk = $("#smoke-bgk");

  const smokeAnimation = () => {
    if (smokeAnimationInitialized) return;
    smokeAnimationInitialized = true;

    let w = window.innerWidth;
    let h = window.innerHeight;

    const THEME = {
      dark: {
        background: 0x666666,
        light: 0xffffff,
        opacity: 1,
      },
      light: {
        background: 0xf2f2f2,
        light: 0xffffff,
        opacity: 0.2,
      },
    } as const;

    const themePreference = window.getThemePreference();
    let currentTheme = THEME[themePreference];

    scene = new THREE.Scene();

    camera = new THREE.PerspectiveCamera(75, w / h, 1, 1000);
    camera.position.z = 10;
    scene.add(camera);

    renderer = new THREE.WebGLRenderer();
    renderer.setSize(w, h);
    renderer.setClearColor(currentTheme.background, 0);

    $bgk?.appendChild(renderer.domElement);

    light = new THREE.DirectionalLight(currentTheme.light, 0.5);
    light.position.set(-1, 3, 1);
    scene.add(light);

    const loader = new THREE.TextureLoader();
    loader.crossOrigin = "";

    loader.load("/img/smoke.webp", (texture) => {
      const smokeGeo = new THREE.PlaneGeometry(300, 300);
      const smokeMaterial = new THREE.MeshLambertMaterial({
        map: texture,
        transparent: true,
        opacity: currentTheme.opacity,
      });

      const NUM_PARTICLES = 300;

      for (let p = 0; p < NUM_PARTICLES; p++) {
        const particles = new THREE.Mesh(smokeGeo, smokeMaterial);
        particles.position.set(
          Math.random() * 500 - 250,
          Math.random() * 500 - 250,
          Math.random() * 1000 - 100
        );

        particles.rotation.z = Math.random() * 360;
        scene.add(particles);
        smokeParticles.push(particles);
      }
    });

    function resize() {
      w = window.innerWidth;
      h = window.innerHeight;

      camera.aspect = w / h;
      camera.updateProjectionMatrix();
      renderer.setSize(w, h);
    }

    function animate() {
      requestAnimationFrame(animate);

      smokeParticles.forEach((p) => {
        p.rotation.z -= 0.001;
      });

      renderer.render(scene, camera);
    }

    animate();

    window.addEventListener("resize", resize);
    window.addEventListener("themeChanged", () => {
      const themePreference = window.getThemePreference();
      currentTheme = THEME[themePreference];
      renderer.setClearColor(currentTheme.background, 1);
      light.color.setHex(currentTheme.light);

      smokeParticles.forEach((p) => {
        if (p.material instanceof THREE.MeshLambertMaterial) {
          p.material.opacity = currentTheme.opacity;
        }
      });
    });
  };

  document.addEventListener("astro:page-load", smokeAnimation);
  document.addEventListener("astro:after-swap", smokeAnimation);
</script>
